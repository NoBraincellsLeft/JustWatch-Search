@page "/"
@page "/title/{NodeId?}"
@page "/search"

@inject IJustwatchApiService _justWatchService
@inject NavigationManager _navigationManager

<PageTitle>JustWatch Search</PageTitle>

<div class="container mt-3">
	@if (NodeId != null)
	{
		<button class="btn btn-secondary mb-3" @onclick="Goback" aria-label="Go back">Back</button>
		<JustWatchTitle Title="selectedTitle" NodeId="@NodeId" />
	}
	else if (searchResponse != null)
	{
		<h2>JustWatch Search</h2>

		<div class="input-group mb-3">
			<input type="text" class="form-control" @bind="SearchBoxInput" @bind:event="oninput"
				   placeholder="Enter movie/show title..." />
		</div>
		<div class="table-responsive">
			<table class="table table-striped table-hover">
				<thead>
					<tr>
						<th>Type</th>
						<th>Title</th>
						<th>Release</th>
						<th>IMDB</th>
						<th></th>
					</tr>
				</thead>
				<tbody>
					@foreach (var title in searchResponse.Result.TitleResults)
					{
						<tr>
							<td>@title?.Node?.ObjectType</td>
							<td>@title?.Node?.Content?.Title</td>
							<td>@title?.Node?.Content?.OriginalReleaseYear</td>
							<td>
								@if (!string.IsNullOrEmpty(title?.Node?.Content?.ExternalIds?.ImdbId))
								{
									<a href="https://www.imdb.com/title/@title.Node.Content.ExternalIds.ImdbId" target="_blank">
										@title.Node.Content.ExternalIds.ImdbId
									</a>
								}
							</td>
							<td>
								<Button class="btn btn-primary" @onclick="() => OpenMovie(title?.Node)">Prices</Button> <a class="btn btn-primary" target="_blank"
																											   href="@($"https://www.justwatch.com{title?.Node?.Content?.FullPath}")">
									Justwatch
								</a>
							</td>
						</tr>
					}
				</tbody>
			</table>
		</div>
	}
	else
	{
		<div class="d-flex justify-content-center">
			<div class="spinner-border text-primary" role="status">
				<span class="sr-only"></span>
			</div>
		</div>
	}
</div>

@code {
	[SupplyParameterFromQuery(Name = "q")]
	[Parameter]
	public string? SearchQueryParam { get; set; } = string.Empty;

	public string? SearchBoxInput
	{
		get => _searchQuery; set => _navigationManager.NavigateTo($"search?q={Uri.EscapeDataString(value ?? "")}");
	}

	private string? _searchQuery { get; set; }
	private SearchTitlesResponse? searchResponse;
	private TitleNode? selectedTitle;

	private CancellationTokenSource? debounceCancellationToken;

	[Parameter]
	public string? NodeId { get; set; }

	protected override async Task OnInitializedAsync()
	{
		if (string.IsNullOrEmpty(NodeId))
		{
			await SearchMovies("");
		}
	}

	protected override async Task OnParametersSetAsync()
	{
		var uri = new Uri(_navigationManager.Uri);
		var hasTitle = uri.Segments.Length > 1 && uri.Segments[1].TrimEnd('/') == "title";

		if (string.IsNullOrEmpty(NodeId))
		{
			if (_searchQuery != SearchQueryParam)
			{
				_ = SearchAsType(SearchQueryParam);
			}
		}
	}

	private async Task SearchAsType(string query)
	{
		_searchQuery = SearchQueryParam;
		debounceCancellationToken?.Cancel();
		debounceCancellationToken = new CancellationTokenSource();
		await Task.Delay(100, debounceCancellationToken.Token);
		if (!debounceCancellationToken.Token.IsCancellationRequested)
		{
			await SearchMovies(query, debounceCancellationToken.Token);
		}
	}
	private async Task SearchMovies(string query, CancellationToken? token = null)
	{
		searchResponse = await _justWatchService.SearchTitlesAsync(query, token);
		StateHasChanged();
	}

	private void OpenMovie(TitleNode? title)
	{
		if (title is null) return;
		selectedTitle = title;
		_navigationManager.NavigateTo($"title/{title.Id}");
	}

	private void Goback()
	{
		selectedTitle = null;
		NodeId = null;
		_navigationManager.NavigateTo($"search?q={Uri.EscapeDataString(_searchQuery ?? "")}");

	}
}
